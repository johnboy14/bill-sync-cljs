(require 'clojurewerkz.neocons.rest)
(require 'clojurewerkz.neocons.rest :as nr)
(require '[clojurewerkz.neocons.rest :as nr])
(def conn (nr/connect "http://localhost:7474" "neo4j" "password"))
conn
(require '[clojurewerkz.neocons.rest.cypher :as cy])
(cy/query conn "MATCH (p:Person {thomas_id": {id}}) return p" {:id "1"})
)
(cy/query conn "MATCH (p:Person {thomas_id": {id}}) return p" {:id "1"}))
(cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person" {:id "1"})
conn
(def conn (nr/connect "http://localhost:7474/db/data/" "neo4j" "password"))
conn
(cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person" {:id "1"})
(cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person" {:id "02286"})
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person" {:id "02286"}))
res
(:data res)
(count (:data res))
(first (:data res))
(:id (first (:data res)))
(:data res)
(:metadata res)
res
(keys res)
(:columns res)
(cy/empty? res)
(require '[clojurewerkz.neocons.rest.nodes :as nn])
res
(nn/get 538)
(nn/get conn 538)
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person.id" {:id "02286"}))
res
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return id" {:id "02286"}))
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person.id" {:id "02286"}))
res
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person.first_name" {:id "02286"}))
res
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person.metadata" {:id "02286"}))
res
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return person._id" {:id "02286"}))
res
(def res (cy/query conn "MATCH (person:Person {thomas_id:{id}}) return ID(person)" {:id "02286"}))
res
(:data res)
(first (:data res))
(first (first (:data res)))
(nn/find-one connect "thomas_id" :thomas_id "1")
(nn/find-one conn "thomas_id" :thomas_id "1")
(nn/find-one conn "thomas_id" "thomas_id" "1")
(nn/find-one conn "Person" "thomas_id" "1")
res
(nn/find-one conn "Person" "thomas_id" "02286")
(nn/find-one conn "thomas_id" "thomas_id" "02286")
(nn/find-one conn "thomas_id" "Person" "02286")
(nn/find-one conn "person" "thomas_id" "02286")
(doc nn/find-one)
(nn/find-one conn "person" "thomas_id" "02286")
(require '[clojurewerkz.neocons.rest.index :as ni])
(ni/get-all conn)
(ni/get-all)
(doc ni/get-all)
(doc ni/get-all conn :person)
(ni/get-all conn :person)
(ni/get-all conn :Person)
(doc nn/find-one)
(ni/get-all conn :Person)
(doc ni/create)
(ni/create :Person :thomas_id)
(ni/create conn :Person :thomas_id)
(ni/get-all conn :Person)
(nn/find-one "Person" "thomas_id" "100")
(nn/find-one conn "Person" "thomas_id" "100")
(ni/get-all conn :Person)
(nn/find-one conn "Person" "thomas_id" "100")
(nn/find-one conn "Person" "thomas_id" "02286")
(ni/get-all conn :Person)
(first (ni/get-all conn :Person))
(nn/find-one conn "person" "thomas_id" "02286")
(nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"})
(nn/find-one conn "Person" "thomas_id" "02286")
(nn/find-one conn "Person" "thomas_id" "1")
(nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"})
(nn/find-one conn "Person" "thomas_id" "1")
(nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"})
(nn/find-one conn "Person" "thomas_id" "1")
(size (nn/find-one conn "Person" "thomas_id" "1"))
(count (nn/find-one conn "Person" "thomas_id" "1"))
(count (:data (nn/find-one conn "Person" "thomas_id" "1")))
(nn/find-one conn "Person" "thomas_id" "1")
(empty? (nn/find-one conn "Person" "thomas_id" "1"))
(nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"})
(nn/find-one conn "Person" "thomas_id" "1")
(nn/create conn :Person {:thomas_id "1" :name "John"})
(nn/create conn : {:thomas_id "1" :name "John"})
(nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"})
(require '[clojurewerkz.neocons.rest.labels])
(require '[clojurewerkz.neocons.rest.labels :as nl])
(nl/add :Person (nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"}))
(doc nl/add)
(nl/add connection (nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"}) :Person)
(nl/add conn (nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"}) :Person)
(nn/create conn {:thomas_id "1" :name "John"})
(nl/add conn (nn/create-unique-in-index conn "Person" "thomas_id" "1" {:thomas_id "1" :name "John"}) :Person)
exit
